<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */


/**
 * Removes invalid XML
 *
 * @access public
 * @param string $value
 * @return string
 */
function removeInvalidXml($value)
{
    $ret = "";
    $current;
    if (empty($value)) 
    {
        return $ret;
    }

    $length = strlen($value);
    for ($i=0; $i < $length; $i++)
    {
        $current = ord($value{$i});
        if (($current == 0x9) ||
            ($current == 0xA) ||
            ($current == 0xD) ||
            (($current >= 0x20) && ($current <= 0xD7FF)) ||
            (($current >= 0xE000) && ($current <= 0xFFFD)) ||
            (($current >= 0x10000) && ($current <= 0x10FFFF)))
        {
            $ret .= chr($current);
        }
        else
        {
            $ret .= " ";
        }
    }
    return $ret;
}

use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_preprocess_HOOK() for page templates.
 *
 * 
 *
 * 
 */

function miramar_preprocess_page(&$variables) {
	if($variables['node'])
	{
		$node = $variables['node'];

		// Sets up program custom hero image for display

		if($node->getType() == "program")
		{
			$image = $node->field_program_hero_image;		// Extract field value from content
			if(!$image->isEmpty())
			{
				$imageUri = $image->entity->getFileUri();	// Build URL to image for Twig display
				$pgmHero = file_create_url($imageUri);
				$variables['hero'] = $pgmHero;
				$variables['pgmtitle'] = $node->get('title')->value;
			}
		}

	}
}

/**
 * Implements template_preprocess_HOOK() for RSS data rows.
 *
 * Extracts node fields and formats them for XML template.
 *
 * 
 */

function miramar_preprocess_views_view_row_rss(&$variables) {
    $item = $variables['row'];
    $node = node_load($item->nid);
    if($node->getType() == "campus_news")	// Is the node the correct content type?
    {
	    $variables['article'] = strip_tags(removeInvalidXML($node->body->value));	// Assign fields to Twig variables
	    $variables['media_target'] = $node->get('field_format')->value;
	    $variables['tags'] = $node->get('field_story_type')->value;
	    $variables['story_date'] = $node->get('field_story_date')->value;
	    $variables['pub_start_date'] = $node->get('field_start_date')->value;
	    $variables['pub_end_date'] = $node->get('field_end_date')->value;
	    $variables['url'] = $node->get('field_link')->getString;
	    $variables['url_label'] = $node->get('field_link_label')->value;
	    $variables['priority'] = $node->get('field_priority')->value;
    }
    elseif($node->getType() == "event")
    {
	    $variables['article'] = strip_tags(removeInvalidXML($node->body->value));
	    $variables['media_target'] = $node->get('field_format')->value;
	    $variables['event_date'] = $node->get('field_event_date')->value;
	    $variables['event_date_end'] = $node->get('field_event_date')->end_value;
	    $variables['tags'] = $node->get('field_event_type')->value;
	    $variables['pub_start_date'] = $node->field_date_to_publish->value;
	    $variables['pub_end_date'] = $node->field_date_to_publish->end_value;
	    $variables['location'] = $node->get('field_event_location')->getString;
	    $variables['rsvp'] = $node->get('field_rsvp_required')->value;
	    $variables['reply_email'] = $node->field_contact->entity->field_email->value;
	    $variables['priority'] = $node->get('field_priority')->value;
    }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 *
 * @todo This is just a poor man's implementation of changing svg logo to png.
 *
 * @see https://www.drupal.org/node/2472127#comment-10458517
 */
function miramar_preprocess_block(&$variables) {
  if (isset($variables['base_plugin_id'])) {
    switch ($variables['base_plugin_id']) {
      case 'system_branding_block':
        $variables['site_logo'] = '';
        if ($variables['content']['site_logo']['#access'] && isset($variables['content']['site_logo']['#uri'])) {
          $variables['content']['site_logo']['#uri'] = $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
        }
        break;

    }
  }
}


function miramar_theme_suggestions_page_alter(&$suggestions, &$vars) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
  }
	if ($node = \Drupal::routeMatch()->getParameter('node')) {
	    $content_type = $node->bundle();
	    $suggestions[] = 'page__'.$content_type;
  }
}


