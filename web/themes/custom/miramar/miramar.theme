<?php
/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */


use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Datetime\DrupalDateTime;
/**
 * Implements hook_preprocess_HOOK() for block templates.
 *
 * @todo This is just a poor man's implementation of changing svg logo to png.
 *
 * @see https://www.drupal.org/node/2472127#comment-10458517
 */

function miramar_preprocess_block(&$variables) {
  if (isset($variables['base_plugin_id'])) {
    switch ($variables['base_plugin_id']) {
      case 'system_branding_block':
        $variables['site_logo'] = '';
        if ($variables['content']['site_logo']['#access'] && isset($variables['content']['site_logo']['#uri'])) {
          $variables['content']['site_logo']['#uri'] = $variables['site_logo'] = str_replace('.svg', '.png', $variables['content']['site_logo']['#uri']);
        }
        break;

    }
  }
// Get Node ID

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $nid = $node->id();
  }
  elseif(\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
	  $nid = \Drupal::routeMatch()->getRawParameter('taxonomy_term');
}
   else {
     $nid = 0;
}
  $variables['nodeid'] = $nid;
}
/**
	Reformats event dates for display using correct time zone.
**/
function miramar_preprocess_node(&$variables) {
	if(!empty($variables['node']))
	{
		$node = $variables['node'];

		switch($node->getType()) {
			case "event":
			case "committee_meeting":
				$realTimezone = new DateTimeZone('PST');
				$gmtTimezone = new DateTimeZone('GMT');
				$localDateTime = new DateTime($node->field_event_date->value, $gmtTimezone);
				$offset = $realTimezone->getOffset($localDateTime);
				$localInterval = DateInterval::createFromDateString((string)$offset . 'seconds');
				$localDateTime->add($localInterval);
				$result = $localDateTime->format('l, F j');
				$variables['newdate'] = $result;
				break;
			default:
		}
	}
}
function miramar_theme_suggestions_page_alter(&$suggestions, &$vars) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
    $term = Term::load($tid);
    $suggestions[] = 'page__taxonomy__' . $term->getVocabularyId();
  }
	/*if ($node = \Drupal::routeMatch()->getParameter('node')) {
	    $content_type = $node->bundle();
	    $suggestions[] = 'page__'.$content_type;
  }*/
if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__' . $node->getType());
  }
}

function miramar_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	$form['#https'] = true;  

  }

/**
 * Implements hook_element_info_alter().
 */
/*function miramar_element_info_alter(array &$types) {
  $types['daterange_default']['#process'][] = 'miramar_datetime_set_format';
}

function miramar_daterange_default_set_format($element) {
  // Remove seconds in browsers that support HTML5 type=date.
  $element['time']['#attributes']['step'] = 60;
 // $element['#attached']['library'][] = 'datetime_tweaks/default_date';
  return $element;
}

function miramar_preprocess_input(&$variables) {
  if ($variables['theme_hook_original'] == 'input__date' && $variables['attributes']['type'] == 'time') {
        $variables['attributes']['step'] = 0;
    }
}
*/
function miramar_field_widget_daterange_default_form_alter(&$element, FormStateInterface $form_state, $context) {
//  $element['value']['#date_time_element']['#attributes']['step'] = 60;
  //$element['end_value']['#date_time_element']['#attributes']['step'] = 60;
  $element['value']['#date_time_element']['time']['#attributes']['step'] = 60;
  $element['end_value']['#date_time_element']['time']['#attributes']['step'] = 60;
}


